//This program was generated by ChatGTP3
#include <iostream>
#include <string>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

// The port on which the server will listen for incoming requests
const int SERVER_PORT = 8000;

int main() {
    // Create a socket to listen for incoming requests
    int server_socket = socket(AF_INET, SOCK_STREAM, 0);
    if (server_socket < 0) {
        std::cerr << "Failed to create server socket" << std::endl;
        return 1;
    }

    // Bind the server socket to the specified port
    struct sockaddr_in server_address{};
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = INADDR_ANY;
    server_address.sin_port = htons(SERVER_PORT);
    if (bind(server_socket, (struct sockaddr *) &server_address, sizeof(server_address)) < 0) {
        std::cerr << "Failed to bind server socket to port " << SERVER_PORT << std::endl;
        return 1;
    }

    // Listen for incoming connections on the server socket
    listen(server_socket, 5);

    // Loop indefinitely, processing incoming client requests
    while (true) {
        // Accept an incoming client connection
        int client_socket = accept(server_socket, nullptr, nullptr);
        if (client_socket < 0) {
            std::cerr << "Failed to accept client connection" << std::endl;
            continue;
        }

        // Send a "Hello, world!" message to the client
        const std::string MESSAGE = "Hello, world!\n";
        send(client_socket, MESSAGE.c_str(), MESSAGE.length(), 0);

        // Close the client socket
        close(client_socket);
    }

    // Close the server socket
    close(server_socket);

    return 0;
}
